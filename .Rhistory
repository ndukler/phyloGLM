Rcpp::compileAttributes()
library(phyloGLM)
devtools::use_testthat()
usethis::use_testthat()
ls
paramIndex
## Setup variables to create a parameterIndex
x=c(1,1,1,2,3,4)
y=c(2,1,3,3,4,5)
name=c("a","b","c","d","e","f")
foo=new(paramIndex,x,y,name,3)
devtools::document()
devtools::document()
library(phyloGLM)
devtools::document()
library(phyloGLM)
phyloGLM:::paramIndex
detach("package:phyloGLM", unload = TRUE)
library(phyloGLM)
detach("package:phyloGLM", unload = TRUE)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
Sys.getpid()
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
getEdgeTable(ad)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod
rateMod@rateIndex
rateMod@rateIndex$getIndex()
rateMod@rateIndex$asDF
rateMod@rateIndex$asDF()
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod
rateMod@piIndex$asDF()
rateMod@rateIndex$asDF()
library(phyloGLM)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(phyloGLM)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod
rateMod@piIndex
rateMod@piIndex$asDF()
rate(rateMod@rateIndex(0,1:3))
rate(rateMod@rateIndex$getIndex(0,1:3))
rateMod@rateDM[1,]
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$getIndex(0,1:3)
rateMod@rateIndex$getIndex(0,0:2)
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod@rateIndex$getIndex(0,0:1,TRUE)
rateMod@rateIndex$asDF()
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,0,TRUE)
rateMod@rateIndex$getIndex(0,0,FALSE)
rateMod@rateIndex$getIndex(0,0:1,FALSE)
rateMod@rateIndex$getIndex(0,0,FALSE)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,0:1,TRUE)
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod@rateIndex$asDF()
rateMod@rateIndex$asDF()
rateMod@rateIndex$asDF()
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,0:2,TRUE)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod@rateIndex$getIndex(0,0,FALSE)
rateMod@rateIndex$getIndex(0,1,FALSE)
rateMod@rateIndex$getIndex(0,2,FALSE)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,2,FALSE)
rateMod@rateIndex$getIndex(0,0,FALSE)
rateMod@rateIndex$getIndex(0,1,FALSE)
library(phyloGLM)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$getIndex(0,1,FALSE)
rateMod@rateIndex$getIndex(0,1,FALSE)
rateMod@rateIndex$getIndex(0,1,TRUE)
rateMod@rateIndex$getIndex(0,0:2,TRUE)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,0:2,TRUE)
testthat::context("paramIndex")
## Setup variables to create a parameterIndex
x=c(1,1,1,2,3,4)
y=c(2,1,3,3,4,5)
name=c("a","b","c","d","e","f")
testthat::test_that("paramIndex builds correctly",{
testthat::expect_s4_class(new(paramIndex,x,y,name,3),"Rcpp_paramIndex")
})
## Test that the index is ordered correctly
foo=new(paramIndex,x,y,name,3)
temp=data.frame(group=x,column=y,name)
temp=temp[with(temp,order(group,column)),]
testthat::test_that("paramIndex sorts correctly",{
testthat::expect_equal(foo$asDF()$name,temp$name)
})
x=c(1,1,1,2,3,4)
y=c(2,1,3,3,4,5)
name=c("a","b","c","d","e","f")
testthat::test_that("paramIndex builds correctly",{
testthat::expect_s4_class(new(paramIndex,x,y,name,3),"Rcpp_paramIndex")
})
## Test that the index is ordered correctly
foo=new(paramIndex,x,y,name,3)
temp=data.frame(group=x,column=y,name)
temp=temp[with(temp,order(group,column)),]
testthat::test_that("paramIndex sorts correctly",{
testthat::expect_equal(foo$asDF()$name,temp$name)
})
x=c(1,1,1,2,3,4)
y=c(2,1,3,3,4,5)
name=c("a","b","c","d","e","f")
testthat::test_that("paramIndex builds correctly",{
testthat::expect_s4_class(new(paramIndex,x,y,name,3),"Rcpp_paramIndex")
})
## Test that the index is ordered correctly
foo=new(paramIndex,x,y,name,3)
temp=data.frame(group=x,column=y,name)
temp=temp[with(temp,order(group,column)),]
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod@rateIndex$getIndex(0,0,FALSE)
rateMod@rateIndex$getIndex(0,1,FALSE)
rateMod@rateIndex$getIndex(0,2,FALSE)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod@rateIndex$asDF()
## Setup variables to create a parameterIndex
x=c(1,1,1,2,3,4)
y=c(2,1,3,3,4,5)
name=c("a","b","c","d","e","f")
## Test that the index is ordered correctly
foo=new(paramIndex,x,y,name,3)
temp=data.frame(group=x,column=y,name)
rateMod@piIndex$getIndex(0,0,TRUE)
rateMod@piIndex$getIndex(0,1,TRUE)
rateMod@piIndex$asDF()
rateMod@piIndex$asDF()
rateMod@piIndex$getIndex(0,1,TRUE)
rateMod@piIndex$getIndex(2,1,TRUE)
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,0,TRUE)
foo$getIndex(1,3,FALSE)
rateMod@rateIndex$getIndex(1,0,TRUE)
rateMod@rateIndex$getIndex(2,0,TRUE)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod@rateIndex$getLookup()
rateMod@rateIndex$getLookup()
z=rateMod@rateIndex$getLookup()
z
str(z)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getLookup()
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod@rateIndex$getIndex(1,0:2,TRUE)
rateMod@rateIndex$getIndex(0:1,0:2,TRUE)
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod@rateIndex$getIndex(0,1:2,TRUE)
library(phyloGLM)
rateMod@rateIndex$asDF()
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getLookup()
rateMod@rateIndex$asDF()
rate(rateMod@params[rateMod@rateIndex$getIndex(0,0:2,TRUE)],rateMod@rateDM[1,])
rateMod@params[rateMod@rateIndex$getIndex(0,0:2,TRUE)]
rateMod@rateDM[1,]
rateMod@params[rateMod@rateIndex$getIndex(0,0:2,TRUE)]
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rate(rateMod@params[rateMod@rateIndex$getIndex(0,0:2,TRUE)+1],rateMod@rateDM[1,])
rateMod@params[rateMod@rateIndex$getIndex(0,0:2,TRUE)+1]
rateMod@rateDM[1,]
rateMod@piIndex
rateMod@piIndex$asDF()
library(phyloGLM)
rateMod
library(phyloGLM)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@phylogeny$rate(0,c(1,1,1))
microbenchmark::microbenchmark(rateMod@phylogeny$rate(0,c(1,1,1)))
microbenchmark::microbenchmark(rateMod@phylogeny$rate(0,c(1,1,1)))
microbenchmark::microbenchmark(a<-rateMod@phylogeny$rate(0,c(1,1,1)))
microbenchmark::microbenchmark(for(i 1:100) rateMod@phylogeny$rate(0,c(1,1,1)))
microbenchmark::microbenchmark({for(i 1:100){rateMod@phylogeny$rate(0,c(1,1,1))}})
microbenchmark::microbenchmark({for(i in 1:100){rateMod@phylogeny$rate(0,c(1,1,1))}})
z=microbenchmark::microbenchmark({for(i in 1:100){rateMod@phylogeny$rate(0,c(1,1,1))}})
z
z=microbenchmark::microbenchmark({rateMod@phylogeny$rate(0,c(1,1,1))})
z
library(phyloGLM)
library(phyloGLM)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@phylogeny$pi(c(1,1,1))
z=microbenchmark::microbenchmark({rateMod@phylogeny$pi(c(1,1,1))})
z
params
exp(0,3,3)
exp(c(0,3,3))
exp(c(0,3,3))/sum(exp(c(0,3,3)))
rateMod
str(rateMod)
lineageTable
rateMod@edgeGroups
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
library(phyloGLM)
detach("package:phyloGLM", unload = TRUE)
library(phyloGLM)
library(phyloGLM)
library(phyloGLM)
library(phyloGLM)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@phylogeny$pi(0,c(1,1,1))
rateMod@phylogeny$pi(c(1,1,1))
rateMod@phylogeny$rate(0,c(1,1,1))
rateMod@phylogeny$getPiIndex()
rateMod@phylogeny$getRateIndex()
ad
ad@tree
getEdgeTable(rateMod)
getTree(rateMod)
library(phyloGLM)
data=ad
list(getTree(data))
list(getTree(data))
list(getTree(data)$edge)
list(getTree(data)$edge,getTree(data)$branch.length)
list(getTree(data)$edge,getTree(data)$edge.length)
list(getTree(data)$edge-1,getTree(data)$edge.length,length(getTree(data)$tip.label))
## Collect tree info in list
treeInfo=list(getTree(data)$edge-1,getTree(data)$edge.length,length(getTree(data)$tip.label))
getTree(data)
library(phyloGLM)
getTree()
## Collect tree info in list
treeInfo=list(getTree(data)$edge-1,getTree(data)$edge.length,length(getTree(data)$tip.label))
treeInfo
library(phyloGLM)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@phylogeny
library(phyloGLM)
## Create phylogeny object in c++
phy=new(phyloGLM:::phylogeny,params,data.frame(rateP$group,rateP$column,colnames(rateDM)[rateP$column+1]),
data.frame(piP$group,piP$col,colnames(piDM)[piP$column+1]),lineageTable$edgeGroup,treeInfo)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
getEdgeTable(ad)
rateMod@phylogeny$getParams()
