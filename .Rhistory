rateMod@rateIndex$getIndex(0,0,FALSE)
rateMod@rateIndex$getIndex(0,1,FALSE)
rateMod@rateIndex$getIndex(0,2,FALSE)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,2,FALSE)
rateMod@rateIndex$getIndex(0,0,FALSE)
rateMod@rateIndex$getIndex(0,1,FALSE)
library(phyloGLM)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$getIndex(0,1,FALSE)
rateMod@rateIndex$getIndex(0,1,FALSE)
rateMod@rateIndex$getIndex(0,1,TRUE)
rateMod@rateIndex$getIndex(0,0:2,TRUE)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,0:2,TRUE)
testthat::context("paramIndex")
## Setup variables to create a parameterIndex
x=c(1,1,1,2,3,4)
y=c(2,1,3,3,4,5)
name=c("a","b","c","d","e","f")
testthat::test_that("paramIndex builds correctly",{
testthat::expect_s4_class(new(paramIndex,x,y,name,3),"Rcpp_paramIndex")
})
## Test that the index is ordered correctly
foo=new(paramIndex,x,y,name,3)
temp=data.frame(group=x,column=y,name)
temp=temp[with(temp,order(group,column)),]
testthat::test_that("paramIndex sorts correctly",{
testthat::expect_equal(foo$asDF()$name,temp$name)
})
x=c(1,1,1,2,3,4)
y=c(2,1,3,3,4,5)
name=c("a","b","c","d","e","f")
testthat::test_that("paramIndex builds correctly",{
testthat::expect_s4_class(new(paramIndex,x,y,name,3),"Rcpp_paramIndex")
})
## Test that the index is ordered correctly
foo=new(paramIndex,x,y,name,3)
temp=data.frame(group=x,column=y,name)
temp=temp[with(temp,order(group,column)),]
testthat::test_that("paramIndex sorts correctly",{
testthat::expect_equal(foo$asDF()$name,temp$name)
})
x=c(1,1,1,2,3,4)
y=c(2,1,3,3,4,5)
name=c("a","b","c","d","e","f")
testthat::test_that("paramIndex builds correctly",{
testthat::expect_s4_class(new(paramIndex,x,y,name,3),"Rcpp_paramIndex")
})
## Test that the index is ordered correctly
foo=new(paramIndex,x,y,name,3)
temp=data.frame(group=x,column=y,name)
temp=temp[with(temp,order(group,column)),]
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod@rateIndex$getIndex(0,0,FALSE)
rateMod@rateIndex$getIndex(0,1,FALSE)
rateMod@rateIndex$getIndex(0,2,FALSE)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod@rateIndex$asDF()
## Setup variables to create a parameterIndex
x=c(1,1,1,2,3,4)
y=c(2,1,3,3,4,5)
name=c("a","b","c","d","e","f")
## Test that the index is ordered correctly
foo=new(paramIndex,x,y,name,3)
temp=data.frame(group=x,column=y,name)
rateMod@piIndex$getIndex(0,0,TRUE)
rateMod@piIndex$getIndex(0,1,TRUE)
rateMod@piIndex$asDF()
rateMod@piIndex$asDF()
rateMod@piIndex$getIndex(0,1,TRUE)
rateMod@piIndex$getIndex(2,1,TRUE)
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,0,TRUE)
foo$getIndex(1,3,FALSE)
rateMod@rateIndex$getIndex(1,0,TRUE)
rateMod@rateIndex$getIndex(2,0,TRUE)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod@rateIndex$getLookup()
rateMod@rateIndex$getLookup()
z=rateMod@rateIndex$getLookup()
z
str(z)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getLookup()
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod@rateIndex$getIndex(1,0:2,TRUE)
rateMod@rateIndex$getIndex(0:1,0:2,TRUE)
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rateMod@rateIndex$getIndex(0,1:2,TRUE)
library(phyloGLM)
rateMod@rateIndex$asDF()
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@rateIndex$asDF()
rateMod@rateIndex$getLookup()
rateMod@rateIndex$asDF()
rate(rateMod@params[rateMod@rateIndex$getIndex(0,0:2,TRUE)],rateMod@rateDM[1,])
rateMod@params[rateMod@rateIndex$getIndex(0,0:2,TRUE)]
rateMod@rateDM[1,]
rateMod@params[rateMod@rateIndex$getIndex(0,0:2,TRUE)]
rateMod@rateIndex$getIndex(0,0:2,TRUE)
rate(rateMod@params[rateMod@rateIndex$getIndex(0,0:2,TRUE)+1],rateMod@rateDM[1,])
rateMod@params[rateMod@rateIndex$getIndex(0,0:2,TRUE)+1]
rateMod@rateDM[1,]
rateMod@piIndex
rateMod@piIndex$asDF()
library(phyloGLM)
rateMod
library(phyloGLM)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@phylogeny$rate(0,c(1,1,1))
microbenchmark::microbenchmark(rateMod@phylogeny$rate(0,c(1,1,1)))
microbenchmark::microbenchmark(rateMod@phylogeny$rate(0,c(1,1,1)))
microbenchmark::microbenchmark(a<-rateMod@phylogeny$rate(0,c(1,1,1)))
microbenchmark::microbenchmark(for(i 1:100) rateMod@phylogeny$rate(0,c(1,1,1)))
microbenchmark::microbenchmark({for(i 1:100){rateMod@phylogeny$rate(0,c(1,1,1))}})
microbenchmark::microbenchmark({for(i in 1:100){rateMod@phylogeny$rate(0,c(1,1,1))}})
z=microbenchmark::microbenchmark({for(i in 1:100){rateMod@phylogeny$rate(0,c(1,1,1))}})
z
z=microbenchmark::microbenchmark({rateMod@phylogeny$rate(0,c(1,1,1))})
z
library(phyloGLM)
library(phyloGLM)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@phylogeny$pi(c(1,1,1))
z=microbenchmark::microbenchmark({rateMod@phylogeny$pi(c(1,1,1))})
z
params
exp(0,3,3)
exp(c(0,3,3))
exp(c(0,3,3))/sum(exp(c(0,3,3)))
rateMod
str(rateMod)
lineageTable
rateMod@edgeGroups
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
library(phyloGLM)
detach("package:phyloGLM", unload = TRUE)
library(phyloGLM)
library(phyloGLM)
library(phyloGLM)
library(phyloGLM)
library(phyloGLM)
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@phylogeny$pi(0,c(1,1,1))
rateMod@phylogeny$pi(c(1,1,1))
rateMod@phylogeny$rate(0,c(1,1,1))
rateMod@phylogeny$getPiIndex()
rateMod@phylogeny$getRateIndex()
ad
ad@tree
getEdgeTable(rateMod)
getTree(rateMod)
library(phyloGLM)
data=ad
list(getTree(data))
list(getTree(data))
list(getTree(data)$edge)
list(getTree(data)$edge,getTree(data)$branch.length)
list(getTree(data)$edge,getTree(data)$edge.length)
list(getTree(data)$edge-1,getTree(data)$edge.length,length(getTree(data)$tip.label))
## Collect tree info in list
treeInfo=list(getTree(data)$edge-1,getTree(data)$edge.length,length(getTree(data)$tip.label))
getTree(data)
library(phyloGLM)
getTree()
## Collect tree info in list
treeInfo=list(getTree(data)$edge-1,getTree(data)$edge.length,length(getTree(data)$tip.label))
treeInfo
library(phyloGLM)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
rateMod@phylogeny
library(phyloGLM)
## Create phylogeny object in c++
phy=new(phyloGLM:::phylogeny,params,data.frame(rateP$group,rateP$column,colnames(rateDM)[rateP$column+1]),
data.frame(piP$group,piP$col,colnames(piDM)[piP$column+1]),lineageTable$edgeGroup,treeInfo)
rateMod=rateModel(data = ad,rateFormula=formula(~cre.class+go.class))
getEdgeTable(ad)
rateMod@phylogeny$getParams()
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
library(phyloGLM)
## Set seed for consistency
set.seed(123)
## Simulate random data
species=c("A","B","C","D","E")
aData=lapply(as.list(species),function(x) matrix(runif(120),ncol=3))
names(aData)=species
## Create test trees, both one that will fail, and one that will pass
tree=ape::rtree(n = length(species),tip.label = species)
## Create a data frame with labels
siteLabels=data.frame(cre.class=rep(c("Enhancer","Promoter"),each=nrow(aData[[1]])/2),
go.class=rep(c("A","B"),times=nrow(aData[[1]])/2))
ad=alleleData(data=aData,tree=tree,siteInfo = siteLabels)
data = ad
rateFormula=formula(~cre.class+go.class)
piFormula=NULL
lineageTable=NULL
## ** Validity checks and default setting** ##
## Check that data is of class alleleData
if(class(data)!="alleleData"){
stop("data must be of class alleleData")
}
## Check that a rate formula is specified as a formula
if(class(rateFormula)!="formula"){
stop("rateFormula must be a formula")
}
## If piFormula is NULL set equal to rateFormula
if(is.null(piFormula)){
write("piFormula is not specified, using same formula as rateFormula...")
piFormula=rateFormula
}
## Check that all coavariates specified in rateFormula are contained in siteInfo
if(!all(all.vars(rateFormula) %in% colnames(getSiteInfo(data)))){
stop("Some of the covariates in the rateFormula are not present in the siteInfo of the alleleData object.")
}
## Check that all coavariates specified in piFormula are contained in siteInfo
if(!all(all.vars(piFormula) %in% colnames(getSiteInfo(data)))){
stop("Some of the covariates in the piFormula are not present in the siteInfo of the alleleData object.")
}
## Checks for lineage table validity
if(!is.null(lineageTable)){
if(!is.data.frame(lineageTable)){
stop("Lineage table must be a data.frame or data.table")
} else if(!all(c("parent","child","edgeGroup") %in% colnames(lineageTable))){
stop("Lineage table must contain the columns \'parent\', \'child\', and \'edgeGroup\'")
} else if(!setequal(with(getEdgeTable(data),paste0(parent,"-",child)),with(lineageTable,paste0(parent,"-",child)))){
stop("Edges in the alleleData object and the supplied lineageTable do not match. Run getEdgeTable(data) to view alleleData edges.")
} else if(any(table(with(lineageTable,paste0(parent,"-",child)))>1)){
stop("Duplicated edges in lineageTable")
}
## Ensuring edge groups are integer labeled from 0 to number_of_groups-1
lineageTable[,edgeGroup:=as.numeric(as.factor(edgeGroup))-1]
} else {
## Create default lineage table
lineageTable=getEdgeTable(data)
lineageTable[,edgeGroup:=0]
}
## ** Intermediate reformating and computation ** ##
## Create environment to hold parameter values and associated indices, etc.
adEnviron=base::new.env()
adEnviron$alleleData=data
## Create the design matrix for the rate variable
rateDM=stats::model.matrix(rateFormula,getSiteInfo(data))
## Create pi design matrix
if(isTRUE(all.equal.formula(rateFormula,piFormula))){
piDM=rateDM
} else {
piDM=stats::model.matrix(piFormula,getSiteInfo(data))
}
## Standardize format for lineageTable and sort by child
data.table::setcolorder(lineageTable,c("parent","child","edgeGroup"))
data.table::setkeyv(x = lineageTable,cols = c("child"))
# Create parameter index
rateP=expand.grid(group=unique(lineageTable$edgeGroup),column=1:ncol(rateDM)-1,
stringsAsFactors = FALSE)
piP=expand.grid(group=2:data@nAlleles-2,column=1:ncol(piDM)-1,stringsAsFactors = FALSE)
## Create parameter vector
params=rep(1,nrow(rateP)+nrow(piP))
## Collect tree info in list
treeInfo=list(getTree(data)$edge-1,getTree(data)$edge.length,length(getTree(data)$tip.label))
## Create edge group vector ordered by child
eG = rep(-1,max(lineageTable$child))
eG[lineageTable$child]=lineageTable$edgeGroup
## Create phylogeny object in c++
phy=new(phyloGLM:::phylogeny,params,data.frame(rateP$group,rateP$column,colnames(rateDM)[rateP$column+1]),
data.frame(piP$group,piP$col,colnames(piDM)[piP$column+1]),eG,treeInfo)
phy$siteLL(ad@data,rateDM,piDM)
library(phyloGLM)
eG
## Create phylogeny object in c++
phy=new(phyloGLM:::phylogeny,params,data.frame(rateP$group,rateP$column,colnames(rateDM)[rateP$column+1]),
data.frame(piP$group,piP$col,colnames(piDM)[piP$column+1]),eG,treeInfo)
phy$siteLL(ad@data,rateDM,piDM)
params
library(phyloGLM)
## Create phylogeny object in c++
phy=new(phyloGLM:::phylogeny,params,data.frame(rateP$group,rateP$column,colnames(rateDM)[rateP$column+1]),
data.frame(piP$group,piP$col,colnames(piDM)[piP$column+1]),eG,treeInfo)
phy$siteLL(ad@data,rateDM,piDM)
library(phyloGLM)
## Create phylogeny object in c++
phy=new(phyloGLM:::phylogeny,params,data.frame(rateP$group,rateP$column,colnames(rateDM)[rateP$column+1]),
data.frame(piP$group,piP$col,colnames(piDM)[piP$column+1]),eG,treeInfo)
phy$siteLL(ad@data,rateDM,piDM)
## Create edge group vector ordered by child
eG = rep(-1,max(lineageTable$child))
eG[lineageTable$child]=lineageTable$edgeGroup
eG
getTree(data)$edge.length
length(getTree(data)$tip.label)
## Collect tree info in list
eL = numeric(max(getTree(data)$edge[,2]))
eL
## Collect tree info in list
eL = rep(-1,max(getTree(data)$edge[,2]))
eL
el[getTree(data)$edge[,2]] = getTree(data)$edge.length
## Collect tree info in list
eL = rep(-1,max(getTree(data)$edge[,2]))
eL[getTree(data)$edge[,2]] = getTree(data)$edge.length
eL
treeInfo=list(getTree(data)$edge-1, eL,length(getTree(data)$tip.label))
## Create edge group vector ordered by child
eG = rep(-1,max(lineageTable$child))
eG[lineageTable$child]=lineageTable$edgeGroup
## Create phylogeny object in c++
phy=new(phyloGLM:::phylogeny,params,data.frame(rateP$group,rateP$column,colnames(rateDM)[rateP$column+1]),
data.frame(piP$group,piP$col,colnames(piDM)[piP$column+1]),eG,treeInfo)
phy$siteLL(ad@data,rateDM,piDM)
library(phyloGLM)
## Create phylogeny object in c++
phy=new(phyloGLM:::phylogeny,params,data.frame(rateP$group,rateP$column,colnames(rateDM)[rateP$column+1]),
data.frame(piP$group,piP$col,colnames(piDM)[piP$column+1]),eG,treeInfo)
phy$siteLL(ad@data,rateDM,piDM)
microbenchmark::microbenchmark(phy$siteLL(ad@data,rateDM,piDM))
library(phyloGLM)
## Setup dataset for testing
## Create tree
tree=ape::read.tree(text = "((A,B),C);")
tree=ape::unroot.phylo(tree)
tree=ape::reorder.phylo(tree,"postorder")
tree$edge.length=c(0.25,0.5,2)
## Settings
nAlleles=2
species=c("A","B","C")
siteInfo=data.frame(A=0.25,B=2)
rateFormula=formula(~A+B)
states=matrix(c(0,1,1),nrow=1)
colnames(states)=tree$tip.label
## Compute site probabilities using epiAllele and construct alleleData object
aData=disCharToProb(states,c(0,1))
library(phyloGLM)
## Compute site probabilities using epiAllele and construct alleleData object
aData=disCharToProb(states,c(0,1))
aData
ad=alleleData(data=aData,tree=tree,siteInfo = siteInfo)
ad
## Construct two edge group edgeTable
et=getEdgeTable(ad)
et
et[,edgeGroup:=c("e1","e2","e3")]
et[,edgeGroup:=c(0,1,2)]
## construct rateModel
rateMod=rateModel(data = ad,rateFormula = rateFormula,lineageTable = et)
library(phyloGLM)
